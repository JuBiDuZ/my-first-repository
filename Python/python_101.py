# -*- coding: utf-8 -*-
"""Python 101.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1adC1Ph_9leYccuMqHYYlpPX_gGx0mG10

# **Python 101**

Contents

- Variable
- Data Types
- String
- Data Structure
- Function
- Control Flow
- OOP (Object Oriented Programming)
"""

# basic computation
print(1 + 1)
print(2 * 2)
print(5 / 2)
print(5 // 2) # floor division
print(5 % 2) # modulo return ค่าเศษ

# variable
income =  50000
expense = 28000
saving = income - expense
print(saving)

del saving

# string variable
my_name = "Boss"
my_age = 27

# old format
print("Hello my name is " + my_name+ " and I am " + str(my_age) + " years old")

# new format
# f-string
text = f"Hello my name is {my_name} and I am {my_age} years old"
print(text)

# type hinting
name: str = "toy"
age: int = 27
gpa: float = 2.76
movie_lover: bool = True # False

print(type(name))
print(type(age))
print(type(gpa))
print(type(movie_lover))

isinstance(name, str)

"""## **Function**"""

# create your own function

# do not have input
def greeting():
    return "hello world"

greeting()

# have input
def greeting_name(name, city):
    print(f"Hello! {name}. I live in {city}")

greeting_name("Boss", "Bangkok")

# get input from user
# input() get only string input

def greeting_name2():
    name = input("What is your name? ")
    return (f"Greeting {name}")

greeting_name2()

# lambda function
def add_two_nums(a, b):
    return a+b

add_two_nums(10,15)

add_two_nums2 = lambda a,b : a+b
add_two_nums2(15,20)

greeting = lambda name: print(f"Hello! {name}")
greeting("boss")

"""## **String**"""

# string
long_text = """hello world
I am learning python
It is as easy as R!"""
print(long_text)

text = "a duck walk into a bar...."

len(text)

# method VS function
# method = functions that designed for specific class Ex. for string only

# string methods
# text.method()
text.split(" ")
text.title()
text.count("a")
text.strip(".")
text.replace("duck", "lion")
text.lower()
text.upper()

# subset / indexing
# python index starts with 0

language = "Python"

print(language[0])
print(language[1])
print(language[5])
print(language[-1]) # the last character
print(language[-2])
print(language[0: ])
print(language[0:2]) # up to 2 but not include 2

"""## Data structures

- list
- tuple
- dictionary
- set
"""

# create a new list
shopping_list = ["egg", "milk", "bread", "tomato"]

type(shopping_list)

print(shopping_list[0])
print(shopping_list[1])
print(shopping_list[-1])

# mutable vs immutable
print(shopping_list)

shopping_list[0] = "chicken"

print(shopping_list)

## mutable => listm dictionary
## immutable => tuple, string

shopping_list = ["egg", "milk", "bread", "tomato"]
# list method

shopping_list.append("pizza")
print(shopping_list)

shopping_list.pop()
print(shopping_list)

print(shopping_list)
shopping_list.count("egg")

shopping_list.sort(reverse = True)
print(shopping_list)

shopping_list.remove("milk")
print(shopping_list)

shopping_list.insert(1, "cocoa")
print(shopping_list)

"""## **Control Flow**

- for
- while
- ifelse
"""

shopping_list = ["egg", "milk", "bread", "tomato"]

# for in loop
for item in shopping_list:
    print(item)

for item2 in shopping_list:
    print(f"I need to buy {item2}")

# tuple
item1 = ("egg", 10)
item2 = ("bread", 5)
print(item1, type(item1))
print(item2, type(item2))

shopping_list = [
    ("egg", 10), 
    ("milk", 5),
    ("bread", 20),
    ("tomato", 12)
]
# list tuple
print(shopping_list)

for item in shopping_list:
    print(f"Product : {item[0]}  Unit : {item[1]}")

number = [1, 2, 3, 4, 5]
new_number = []
for num in number:
    new_number.append(num*2)

print(new_number)

#list comprehension
number = [1, 2, 3, 4, 5]
new_number = [num*2 for num in number]

print(new_number)

# example of set
food_list = ["pizza", "chicken", "coke", "coke", "pizza"]
len(set(food_list))

# Dictionary
customer = {
    "name" : "Boss",
    "age" : 27,
    "location" : "Baangkok",
    "movie_lover" : True,
    "movie_fav" : ["Thor", "Batman", "Superman"],
    "shopping_list" : ("egg", 10),
    "book" : {"name" : "Sapiens", "year" : 2015}
}

customer["movie_fav"][0:2]

# for loop in dic
for key, value in customer.items():
    print(f"{key} : {value}")

# while loop
count = 0

while count < 10:
    print("Hello!")
    count = count + 1

# ifesle
score = 88
if score >= 80:
    print("Passed")
else:
    print("Failed")

def grading(score):
    if score >= 80:
        return "A"
    elif score >= 70:
        return "B"
    elif score >= 60:
        return "C"
    elif score >= 50:
        return "D"
    else:
        return "F"

grading(55)

scores = [90, 85, 72, 82, 65]

grade = []
for score in scores:
    result = grading(score)
    grade.append( (score,result) )

print(grade)

#list comprehension
grades = [(score, grading(score)) for score in scores]

print(grades)
type(grades)

"""## OOP
Object Oriented Programming

เขียนโปรแกรม เพื่อสร้าง object ที่มีอยู่บนโลกนี้ให้คอมพิวเตอร์ได้เข้าใจ

- 'class' to create new Class
- __   #double underscore -> dunder
- ทุก function ที่สร้างขึ้นมาใน Class ต้อง Refer ไปที่ตัวมันเอง (self)
"""

class Dog:
    # constructor => initialization
    def __init__(self, name, age, species, energy):
        self.name = name
        self.age = age
        self.species = species
        self.energy = energy

    def __str__(self):
        return "I am a dog :D"

    # create method
    def greeting(self):
        print(f"Hi! my name is {self.name}! and I am {self.species}")

    def eating(self, food):
        print(f"I love to eat {food} because it is very delicious!")

    def playing(self, activity):
        if activity == "sleeping":
            self.energy += 10
        elif activity == "running":
            self.energy -= 20
        else:
            self.energy -=5
        print(f"Energy : {self.energy}")

# create instances
dog1 = Dog("Jojo", 3, "Golden", 100)
dog2 = Dog("Happy", 2, "Bulldog", 90)

dog1 = Dog("Jojo", 3, "Golden", 100)
dog1.greeting()
dog1.eating("burger")
dog1.playing("running")

print(dog1)

class Person:
    def __init__(self, name):
        self.name = name
    def sayhi(self):
        print(f"Hello I am {self.name}")

person = Person("Boss")
person.sayhi()

# Inheritance (child)
class Employee(Person):
    def __init__(self, name, job, company):
        super().__init__(name) #super -> mention to parent
        self.job = job
        self.company = company

    def sayhi(self):
        print(f"I am an Empolyee. My name is {self.name}, Company : {self.company}")

emp1 = Employee("Boss", "data", "not working")

emp1.sayhi()

